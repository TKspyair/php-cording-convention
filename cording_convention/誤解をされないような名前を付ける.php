<?php
//======================================================================
// 誤解されないような名前を付ける
//======================================================================

/** 目次
 * 曖昧な言葉を避ける
 * 限界値を含めるときは「min」と「max」を使用する
 * 範囲の指定の使い分け
 * 真偽値(ブール値)の意味を明確にする
 * 複数の名前を検討する
 */


//-----------------------------------------------------
// 曖昧な言葉を避ける　テーマ：HTTPリクエストの処理
//-----------------------------------------------------

# 悪い例：意味が広すぎる言葉で機能をまとめてしまうと、どのような機能や役割があるか不明瞭である
function handleRequest()
{ //handle: 扱う、処理する　※リクエストやエラー処理でよく使われる単語
    //リクエストの存在を確認する処理
    //バリデーション処理
}

# 良い例：それぞれの機能を分けて命名することで、機能や役割が明瞭になっている
function isRequest() //is~():真偽値の確認によく使われる命名方法
{
    //リクエストの存在(真偽値)を確認する処理
}
function validateData()
{
    //バリデーション処理
}

//-----------------------------------------------------   
// 限界値を含めるときは「min」と「max」を使用する
//-----------------------------------------------------

# 悪い例：「limit」では10を含むかどうかや上限、下限どちらなのかが不明瞭
    $ageLimit = 120;

# 良い例：「max」「min」を使用することで限界値が明瞭になる
    $maxAgeLimit = 120;

/** 備考
 * limit: ルールや制約そのものを指す　※if文の条件分岐などの制御フローによく使用される
 * max, min: 主に数値の上限、下限を指し、包含的である　※max()やmin()といった数値に関する関数が存在し、慣習的に数値の限界値を意味する
*/

//-----------------------------------------------------
// 範囲の指定の使い分け
//-----------------------------------------------------

# first-last: 順序を持つ具体的な範囲(配列の要素など)の両端を指し、どちらも包含的な意味をもつ

# begin-end: 時間やプロセスの区切りのような抽象的な範囲を指し、firstは常に包含的だが、endは包含的・排他的どちらにもなる

//-----------------------------------------------------
// 真偽値(ブール値)の意味を明確にする　
//-----------------------------------------------------

# 悪い例:　「true」が成功なのか、完了なのかどのような意味があるか不明瞭
    $status = true;

# 良い例： 「true」の指す意味が明瞭である
    $isCompleted = true; // 完了
    $isSuccessful = true; //成功

/** 備考
 * 論理値を表現する変数名には状態を示す言葉(形容詞または過去分詞)を使用する ※過去分詞：動詞の過去形で状態を示す形容詞としての意味もある
 * 
 * ブール値の命名に使用される言葉
 * - is~ :～であるかどうか
 * - has~ : ～が存在するかどうか
 * - can~ :～可能かどうか
 * - should~ :　～すべきかどうか
 */

//-----------------------------------------------------
// 複数の名前を検討する
//-----------------------------------------------------

# 命名するときは複数の候補を検討し、それぞれの長所を考慮して最善の名前を選ぶ