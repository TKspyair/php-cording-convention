<?php

//======================================================================
// 名前に情報を詰め込む
//======================================================================
/** 
 * 明確な単語を使う(汎用的な名前を使わない)
 * 具体的な名前を使う(抽象的な名前を使わない)
 * 接尾辞(単語の先頭に付く要素：dis,re)や接頭辞(単語の末尾に付く要素：-able,less)を適切に使用する
 * 値の単位を盛り込む
 * 命名規則を定める
*/

//-----------------------------------------------------
// 明確な単語を使う　テーマ：ループイテレータ(forやforeachなどのループ構文で使用される「i」や「j」のこと)
//-----------------------------------------------------

# 悪い例:「$i」がループイテレータであること以外の情報が不明
for ($i = 0; $i < count($users); $i++) {
    // ...
}

# 良い例:ループイテレータに明確な単語を命名することで、ループ内で何が変化するのかが理解しやすい
for($age = 0; $age < 10; $age++){
    // ...
}

//-----------------------------------------------------
// 具体的な名前を選ぶ　テーマ：データの取得  
//-----------------------------------------------------

# 悪い例：どこからどのようにデータを取得したいのか不明　※「get」：「手に入れる」という広い意味を持つ
function getData() {
    return $data; 
}

# 良い例：データベースからユーザーの情報を取得するという意図が明確になっている　※fetch：外部(サーバーやDB)からデータを取得する
function fetchUsersFromDb() {
    return $users; 
}

//-----------------------------------------------------
// 値の単位を盛り込む　テーマ：通信速度の計算　※通信速度(Mbps) = データ量(MB) * 時間(秒) 
//-----------------------------------------------------

# 悪い例：計算式や出力がどのような単位で行われるのか見てわからない
function calculateThroughput($dataSize, $time)
{
    // 通信速度の計算
    $throughput = ($dataSize * 8) / $time;

    // 小数点第2位まで表示
    return number_format($throughput, 2);
}

# 良い例：関数や変数の名前に単位が含まれているので、どのような計算がされるのか理解しやすい
function calculateThroughputMbps($dataSizeMegabytes, $timeSeconds) // throughput: 通信速度
{
    // データ量をバイトからビットに変換する(1Byte = 8bit)
    $dataSizeMegabits = $dataSizeMegabytes * 8;

    // 通信速度（Mbps）を計算  ※Mbps : Megabit per seconds (Megaは100万)
    $throughputMbps = $dataSizeMegabits / $timeSeconds;

    // 少数第2位まで表示
    return number_format($throughputMbps, 2);
}

//-----------------------------------------------------
// 重要な属性を追加する
//-----------------------------------------------------

# 現在は理解できないため保留

//-----------------------------------------------------
// 命名規則を定める
//-----------------------------------------------------

/* 固有の省略文字は使用しない
  > そのプロジェクトに詳しくない人が見たときに、理解しづらくなる 
*/

/* 不要な単語を減らす
  > 伝えたい情報が損なわれない単語は削除する　×　DoCaluculate 〇 Caluculate
*/

/* 名前のフォーマットで情報を伝える
  > そのコードの役割や機能が一目瞭然になる　※言語やプロジェクトごとにフォーマットが違うので注意
  # 関数名(メソッド名)、変数名(プロパティ名)：キャメルケース(ローワーキャメルケース)　例　fetchUser(), $userName
  # クラス名：パスカルケース(アッパーキャメルケース) 例 User,Post
  # テーブル名：パスカルケース(アッパーキャメルケース) 例　TransactionResult
  #カラム名：スネークケース　例　user_name
 */
?>